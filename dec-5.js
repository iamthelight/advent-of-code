const input = `BFBBFFBRRL
BFBFFFFRLL
FBFBFFBRRR
FFBBBFBRLL
BBBFBFBRLR
BFBBFBFLRR
FBBBFFFRRL
BBFFBFFLLL
BBBFBBBRLR
BFFBFFBRRL
FFBFFFFLRR
BFBBBFFRRR
BFFBBFFRRR
BBFFFFBLLL
BFBBBFFLLL
FBFFBBFRLR
BFBBFBFRLR
FBFBBBFRRL
BBFFBBFLRL
FBBFBFBLLR
FBFFFFFLLR
BFBFFFFLRL
FBFFFFFLRR
FBBBFFBRLL
BFFFBFBRRR
FFBBFFBRLR
FBBBBBBLRL
FFBFFBFLLL
BBFBFFFRLL
FBFFFFFLRL
BBFFBBBRRR
FFBBFFBRRR
FFFBFBBRRL
FBBBFBFRRL
BFBFFBBLRL
BBBBFFFLRR
FBBFFBFLRL
FBFFFBFLRL
BFFBBFBRRR
FBFFBBBRLR
FBBBBBBLLR
BFBFFBBLLL
BBFBFBFLRR
BFBFBBBLLL
BFBBFBFRLL
FBBBBBBRRL
BFFFBFFLLR
BBFFBFFRLL
BFFBFFBLRL
BBFBBBFLLR
FBFBFBBLRR
FBFBBFBLLR
BFFFFBBRRR
BFBFFFBLRL
FBBBFFBLLR
FFFBBFBLLR
FFBBBFFRLR
BFBBFFBLRR
BFBFBBFRLL
FBFBBBBRRL
FBBBFFBRLR
FFBBBFBRRL
BBFFBFFLRL
BFBBFBBRRR
BBBFBBFLLR
BBFFFBBLRL
BBFFBFBLLR
FBBFBFBRLR
BFFBBBFLRR
BFFBFFBLRR
BBFBBFBLLR
FFBFFFFRRL
FBBFFFFLRL
FBBBFBFRLL
BFFBBFBLRL
BBBFFFFRLL
FFFBBBFRRR
FFBFFBFRRR
FBBBFFFRLR
BFFBFFFRLR
BFBFBFBRRL
BFFFBBBLLL
BFBBFBFLLR
FFFBFBFLRL
BFBBBFBLRL
FBBBFFBLRL
FBFFBBFRRL
BBBFFBBLRR
FFFBBFFRLR
FFFBFFFRLL
FFBBBFFLLL
BBBFBBFRLL
BFFFBBBRRR
FBBBFFFLLL
BFFBFFFLRL
BBFBFFBLRR
BFBFFFBRLR
BFFBBFFRRL
BFBBFBBLRL
FFFBBBBRRR
BBFBBFFLLL
FFBBFBBRLL
FFFBBBFLLL
FFBBBBFRRL
BFBFFBFRRL
FBFBFFBLRR
FFFBBBFRRL
BBFFBFFLRR
FBFFBBFLRL
BBBFFBFLRL
FFBFBFBLRL
FFBBFBBRLR
FBBFFFBRLL
FBBFFBFRLR
BFFBFBFLRL
BBFFBBBLLR
FBFBFBBLRL
BBFBBBFRRL
BFBBBFFLRL
BFFBFBBLLR
BBBFBFFRRR
BFFFBBBRLL
BFFBFBFLRR
BFBFBFFRLL
BFFBBBFLRL
BBFFFBFRLR
BBFFFFFRLR
BBFBBFBLLL
BFBBBBBLRR
BFFFBBBRLR
FFBFBBBLRR
FBFFBFFLRR
BFBFFBBLRR
FFBFFBBRLL
BBFBBBBLRL
FFBBBFFLLR
FBFBBFBRLL
BFBFBFFLLL
FFBFFFFRLL
BFFFFFFRLL
FBBBFBBRRL
FBBBFBFLRL
FBFBBFFLLR
BFBFFFFRLR
BBFFBBBLLL
FBFFBBFLLR
FBFBBFFRRR
BBBFFBBLRL
FBBFBFFLRL
FBFFFFFRRR
BBFBFFBRLL
FFFBFFBLLR
FBFFFFFRRL
FFBBFBBLLL
FFBFFBFRRL
FBBFFBBRRR
FBFFFBBRLR
FBBFBFFLLL
BFFFFBFLRR
FBFFFBBRLL
FFFBBBBRRL
FBBFBBFLLR
FFFBBFFRLL
FBBFBFBLLL
BFBFFFBLLR
BFFFFFBLRL
BFFFBBBLRL
BFBBFBBLRR
FFBFBFFRRR
BBBFBBBLRL
BBBFBBFRRL
FFBBBFFLRL
BBFBFBFRRR
BFFFFFFLLR
BFFFFFBLLL
FBFBFFFRRL
BBBFFBFRRR
BFBBFBBRLL
BFFFFBFLRL
BBBFFBFRLL
BBBFFBFLRR
BFFFFFFLRR
BBFFBFBRRR
BBBFBBBRLL
BFBFBFFRLR
FBBFFFFRRL
FBFBBFFRLL
BBFBFFFLRR
BBFBBFBRRR
FBFFBFBLRL
FFBFBFFLLR
BFBFFFBLLL
BFFFFBFRLL
BBFFFBBRRR
FBBBFBFLLL
FBBFBFFLLR
FFFBBFFRRR
BFFFBFFRRL
BFBBFBBRRL
BFFFBFBLLR
BFFFBBFRRR
BFFFFBBLLR
FFBBFFBLRL
FFFBBBFLLR
BBBFFBBRLL
FFBFFBFLRL
BFFFFBFRLR
BBBFBFBLRR
BFFFBBFRRL
FBBFFFFLRR
FBFBFBFRLL
BBBFFFBRRL
FBFBFFFLLR
BFBBFFFLRR
BBBFFFFRRL
BFBFFBFRLR
BBFFFFFLLL
FBBFBBFLRR
FFBBBFBLRL
FFBFFFBRLR
FBFFFFFRLR
BBBFBFBRRR
BBBFFFFRLR
BFBBFFFRLL
BFBFBBFLLR
FFBBBBBLRL
BFFFBFBLRR
FFBFFFBRRL
FBFBFFFRRR
BFBBFFFRLR
FBBFBFBLRR
FFBFFFFLRL
BBFFFBBLRR
FFBFBBBRRL
FBBFFBBLLR
FBFBBBFLRL
BBFFBFBLRL
BBFFBBBRLR
FBBBFBBRLL
BBFFBBBRRL
BFFFBFFRRR
BFBFFFFRRR
BFBBFFBRLR
FFFBBBFRLR
BFBBFFFLRL
BBFFFBBRRL
BFFBFFBRLL
FFBFFBBLLL
FFFBBFFLRL
FBFFBFBLRR
FBFBFBBRLL
BBBFBBBRRR
FFBBFBBRRL
BFBBBFBRRL
FFBFFFBRRR
BFFBBFFRLR
FFBFFBBLRR
BFFFFFBLLR
FFBBFFFRRR
FBBBFBBLLL
FFBFBFBLLL
FFBBFFBRLL
BFBBBBBRRL
BFBFFBBRLR
BBBFBBFLRL
BBBFBFFLRR
FBBFFFBRRR
BBFBFBBRLL
BBFBFFBRLR
BFFBBBBLRR
BBFFBFBLLL
FBBFBBFLRL
BFFBFBFRRR
BFFFBFFRLL
FFFBBFFLRR
FBBFFBBRLR
FBBFFFFRLR
BBFBBFBLRR
FBFFFFBLRL
BBFBBFFRLR
BFBFBBBRLL
FFBBFFBLRR
FBFBBFFLRL
FBBFFBFRRR
FBFBFFFRLL
FBFFFBFLRR
FFBBFBBRRR
FFBBFFFRLR
FBBFFFBLLR
FBFFFBBLLR
BFBFBFBLLL
BBBFBFFLLL
BFBFFFBRRR
FFFBBFFLLL
FBFFBFBLLL
FFBFBFBRRL
FBFFBBBLRR
BBFBFBBLLR
BFFBFBFLLL
FFFBBBBLLL
FBFBBFFLLL
BBBFFBFLLR
BFFBBFBRLR
FBBBBFFRLR
FBFBFBBLLR
FFBFFFFRRR
FBBFBFBRRL
FBFBFFBRRL
BBFBFFFLLL
FFFBFBBRLR
BBBFFFBLLL
FBBBFFBLLL
FFBFFBFRLL
BFFFBFFLLL
FBFBFFBRLL
FFBFFBFRLR
FBBFFFBLLL
BFFBBBFLLR
FFBBBBFRRR
BBBFFBBRRL
BFFFBBBRRL
FFBBBBBLLR
FFBBFFFLRL
BFFFBFBLLL
BFBFFBBRRR
FBFBBFBRLR
BFFBFBBRRR
BFBBBFFRLR
BFBBBBBRRR
BFBFFFBRLL
FFBFBBFLLL
BBFFBBFLLR
FBFFFBBRRR
BBBBFFFLLL
BFFBBFFLLR
BBBFFBFRRL
BBFFBBFRLL
FFBFBBBLLR
FBFFBBFRRR
BFFFFFFRLR
BBFFFFFLRL
FBBBBFFLRL
BFBFFFBLRR
FBBBFBFLLR
BFFFBFBRRL
BBFFFFBLRR
FFFBFBFLLL
BFBFBBFRRR
BBFBFFBLLL
BBFFBFBLRR
BFBBFFBLRL
BBFBBFFRRL
BFFBBBBLRL
FBBBBBFLLL
BFBBFFFRRR
FBFFFFBRLL
BBFFBBBRLL
FBFBBFFRLR
FBFBBFBLRR
FFBBFFBRRL
FBBBBBFLLR
BBFBFBFRLL
BBFBBBFLRL
BFBBBFFLRR
FBFBBBBLRR
FFBFBBBRRR
FBBBBFFRLL
BFFFBBFRLR
FBBFFBBRRL
BBFFBFFRRR
FBBFFBBRLL
BFFBFBFRLR
FFBFBFFRLL
FBBBBFBRRL
FFFBFFFRRR
FBFFFBBLRR
FBBBBBBRLR
FBBBFBBRLR
BFBBBBFRRL
BFFFBBFLRL
FBBFBBFRLR
FFBBFBFRRL
BFFBFFBRLR
BFBBBBFRRR
BFFFBFBLRL
FBBFFFBLRR
BBFFFBFLLR
FBFBFFBLLL
BBFBBBBLRR
BBFFFBFLRR
FBFFBBBLRL
FBFFBBFLRR
BFBFFBBRRL
FBFFBFFRLL
BFBFFBFLRL
FFBBBFFRLL
BFFFBBFLLL
BFFFBFFLRR
BBFFFBFRRR
BFFFBBBLRR
FBFBBFBLLL
FBFBFBBRLR
BFBFFBBRLL
BFBBFFFRRL
BFFFFBFRRL
BBFFBFFLLR
BFFBFFFRRR
BFFBFFFRRL
BFFFBBFLLR
BBFBFBBRRR
BFBBFFBLLR
BFFFFBFRRR
FFFBBFBLRL
FFBBFBBLRR
FFBFBFBRLR
FFBFBFFLRL
FBFBBBFLLL
BFFFBBFRLL
FBBFBFFLRR
FBFFFFBLRR
BBBFFFFLLR
BFBBBFFRLL
BFBBFFFLLR
FFBFFBFLLR
FBFFFBFLLR
FFBFBBFLRL
FBFBFFFRLR
FFFBFBBLRR
BBBFFBBLLR
FBFFBFFRRL
FFFBBBFRLL
FFFBFFFRLR
FBBBFBFRRR
BBBFBFBRRL
BBFFFBBRLR
BFFBFBFLLR
BFBBBFBRLL
BBFBFBBLRR
BBFFFFBRLL
BFFFBBFLRR
FBBFBFFRRL
BFBFFBFRLL
BFBFFBFRRR
BFFBBBFRRR
FBBFBBBRRR
FBBFBBBLRL
BBFFBBFLRR
BBFFBBBLRR
BFFFFFBLRR
BBBFFBFLLL
BFBFBBBLRR
FBBBFBBLRL
BBBBFFFRLR
FBFBBFBRRL
FBFBBBFLRR
BFBBBBFRLR
BFFFFBBLRR
FBFFBBBRLL
BFBFFFBRRL
BBBFBBFRLR
FFFBFBBRRR
FBFFBFFRRR
FBFFFFFRLL
BBFFBFBRLR
BFFBBBBRRL
BBFBFFFLRL
FFBBBBFRLL
FBBFBFFRRR
FFBFFBBLRL
FFFBFBFRLR
FBFFFFBRRL
BBFBBBBRLR
FFBBBBBRLL
BFBBBFBRLR
FBFFFBBLRL
BFFFFBBRRL
FFBFFFBLRL
BBBFFFBRLR
FBFFFBFRLR
FBBBBFFRRR
BFBBFFBRLL
FBBFBBFRRL
FBBBBFBRRR
BBFFFFFLLR
BBBFFFBLRR
BBFBFBFRLR
BFFBBBBRLR
FBFBFFFLRR
BFBBBBBRLL
FBFBFBBRRR
BFFFBFFRLR
FFBBBBFLRR
FBFFFFBLLR
FFBBFBFLRR
FBBFFFBRRL
FFBFFBBRRL
BBBFFFFLRR
BFBFBFBLRR
BFFBFBBLRR
BBBFFBBRRR
FFBBBFBLRR
FBFFBBBLLL
FFBBBBFRLR
FBBBBFBLLL
BFFBBBBRRR
FFFBFBFLRR
BFFBBBFRLL
FFFBBBFLRL
FBBBBFFLLL
FFFBBBBRLR
BFFBFBFRRL
BFFFFBBRLL
FBBFFBBLRR
FFBBFBFRLL
FBBFBBBLRR
BFBFBFFRRR
FFBBFBFLRL
BFFBBFFLRR
BFBFFBFLLR
BFBBBBFLLR
FBFBFBFRRR
BBFBFBBLLL
BBFBFFFRRR
BFBFBBBRLR
BBFBFFBLLR
BFFBFFBLLL
FFBFFFFRLR
BFFFFBBLLL
BFFBBBBRLL
BFBFBFFLRR
FBBFFBFLLL
BFFFBFBRLR
FBFFBFFLLL
BFFFFBFLLR
FFFBFBBLLL
FBBBBBFRRL
BFFBBFBLLR
BBBFFFBRLL
FFFBFBBLRL
BBFFBBFLLL
FFFBFFBRLL
BFBBFBFRRL
BFBBBFFRRL
BBBFBFBLLR
BFFBFFFLRR
FFFBBFBLRR
BFFBBFFLLL
BBFBFBFLRL
BBFFFFBLRL
BFBFBFBRLL
FBBBFFFLRR
BBBFFFBLRL
BBFBFFBLRL
BBFFBFBRRL
BBFBFFFRLR
BFFBBBFLLL
FBFFBFBLLR
BBFBBBBLLR
FFBFFFBLRR
FFBBFBFRLR
BFBFFFFRRL
FBFFBFBRLL
FFBFFBBRRR
FFBBFFFRLL
FBFBFBFRRL
FFBBBFBLLR
FFBFBFBLRR
BFBBBBFLRL
BFFBFBBRLR
FFFBBBBLLR
FFBFFFFLLR
FBBBFBBLLR
FBFBBFBRRR
BFBFBFBLLR
FFBBBBBRRL
FBBFBBBLLL
FFFBBFBRRR
FBBFBFBRLL
FBBBBBFLRL
BBFFFFFRRR
BFBBBBBLLR
BFFBBBBLLR
BFBBFBBRLR
BFBBBBFLRR
FBBBBFBLRR
FBBBBBFLRR
BFFBBFBRLL
BBFBBFBRLR
BBFFBFFRLR
FBBFFBBLLL
FFBFBFFLLL
BFFFFFFRRL
BBBFBBBLLR
FBFFBBBLLR
BBFFFBFLLL
FBFBBBFRRR
BBBBFFFRLL
FBFBBBBRLL
BFBFFFFLRR
BFBFBBFRLR
FBBBFFBRRL
FFBFFFBRLL
BFBFFBFLRR
BFBBFBFRRR
FFBBBFBRLR
BBFFFBFRRL
BBBFFFFLLL
FFBBFFFLLR
FFBBFFFLRR
FBBFFFFRRR
FBFBBBFRLR
FFFBFFBRRL
FFBFBBFRRR
FFBBBFBLLL
FFBBFFBLLL
FFFBBFBLLL
FFBBFBBLRL
FBBBFFFRLL
BBFFBBBLRL
BFBBBFBRRR
BFBFFBBLLR
BFFBFBBLLL
BFBBFFFLLL
FFBFBBFLRR
FBFBBBBLRL
BFBFBBFLRR
BFBBBBFRLL
BBFFFBBLLR
FBBFFBBLRL
FBBFBFFRLL
FBBFBBBLLR
FBBFBBBRLR
BBFFFFBLLR
FBBFBFBRRR
BBBFBFBRLL
FFFBBFFLLR
BBBFBFFRRL
BFFFFFFLLL
FBFBBFBLRL
FBFFBFFRLR
FBFBFFBLLR
FBBFFBFLLR
BFBFBBBLLR
FBBBBFBRLR
FFBBFBBLLR
BFBBBBFLLL
FFFBBFFRRL
BFBFFBFLLL
BBBFFFBLLR
BBFFBFFRRL
BFFFFBBRLR
BBFFBBFRLR
BBBFFFBRRR
BBFBBBBLLL
BFBFBFBRLR
FBBFFFFRLL
BBFBBFFLRR
BFBFBBBLRL
BBFFBFBRLL
BBBFFBFRLR
FFBFBFFRRL
BBFFFFBRRL
FBBFFBFLRR
FBFFBFFLRL
BFFFFFBRRR
BFFBFBBRRL
BFFBFFFLLR
BFFBFBFRLL
FFBBBBFLLL
BBFBFBBRRL
BFFFBFFLRL
BBBFBBFRRR
FFBFBBFRRL
BFFBFFFRLL
BFBBBFBLRR
BFFBFFFLLL
FBFBFBFLLR
FBBBBBBLRR
FBFFBFFLLR
FBBBFFFLRL
BBFBBBFLRR
FFBFBBBLLL
BFBBFFBRRR
FFFBFBBLLR
BFBFBBBRRL
BBBFBBFLLL
FBFBFFBRLR
FFFBFFBRLR
FFFBFFBRRR
BFFBBFFLRL
BBBFBBFLRR
FBFBBBFLLR
BBFBFFFRRL
BFBFFFFLLR
FBBFBBBRLL
FFBBFFBLLR
FBFBBBBRRR
BFBFBBFLRL
FFBFBFFRLR
FBBBBBFRLL
FBBFBBFRLL
FBBBBBBRLL
BFBFBFBRRR
FBBBBBFRLR
FFBBFBFLLL
BBBFBFBLLL
FFBBFBFRRR
BFFBFFBLLR
BBFBBFBRLL
FBBBBFBRLL
FFFBBBBRLL
BBFBFBFLLL
FBBBBBBLLL
FFFBFBBRLL
BBFFFFFRLL
BBFBFFFLLR
FBBBFFBRRR
BBFFFFFLRR
FFBFBBFRLL
FBFBBBBLLL
BBBFFFFRRR
BFFBFFBRRR
BBBBFFFLLR
BFBBBFFLLR
FBBFFFFLLR
FBFBFBFRLR
BFFBFBBLRL
FBFFFBFRRL
BBBFBFBLRL
FFBBFBFLLR
FBFFBFBRLR
FFFBBBBLRR
BFFBBBFRLR
FBFFFFBLLL
BBFBBBBRRL
FFBFBFBRLL
BBFBBBFLLL
BFBBFBBLLL
FFBBBBFLRL
FFBFBBFLLR
FBFBFBBRRL
BFFBBFBLRR
BFFBBFBRRL
BFBBFBBLLR
FFFBFBFRRL
BBFBBFBLRL
FBBFBBFRRR
BBFFFBFLRL
BFFFFFFLRL
BFFBFBBRLL
FBFFFFFLLL
BBBBFFFLRL
BBBFBFFLRL
BFBBBBBLRL
FBFBFFFLLL
FFFBFBFRRR
BBFBBFBRRL
FBFFBBFRLL
FFBFBBBLRL
BBFBFBBLRL
FFBFBFFLRR
FBFBBFFRRL
BBFBFBBRLR
BBFFFFBRLR
BBFFFBBRLL
FBBBBBFRRR
FBBFFFBRLR
FFBFFBBLLR
FBBBFFBLRR
BBFBBBFRLR
FBFBFFFLRL
BFFFBBBLLR
BBBFBFFLLR
BFFFFFBRRL
FBFBFFBLRL
FBBBBFFRRL
FFBBBFFRRL
FBFBBBBRLR
FBBBBFBLRL
BFFBBBFRRL
BFBFBBFLLL
BFBFFFFLLL
BFFFFBFLLL
FFBBBFFRRR
BBFFFBBLLL
BBBFBBBLRR
BFBBBFBLLR
FFFBFBFLLR
FBBBFBFRLR
BFBFBFFRRL
FBFBFBFLLL
BFFFFFBRLR
BBBFFFFLRL
BBFBBBFRLL
FFFBBFBRLR
BBFBFFBRRR
BBFBBBBRRR
FFBBBFFLRR
BFBBFBFLLL
FBBBFBBRRR
FFBFBBBRLR
FFBFBBBRLL
FBBFFBFRRL
BBFBBBFRRR
FBBBFBBLRR
FFFBBBFLRR
BBFBFBFLLR
BFFFFFFRRR
FFBBBBBRLR
FBBFBBFLLL
FBBFFFFLLL
BBFFFFFRRL
FBFFFBFRLL
FBFFBBBRRL
BBFFFBFRLL
FBFBFBBLLL
BBFBFFBRRL
FBFFFBFRRR
FFBBBBBLLL
BBFBBFFLRL
BBBFBBBLLL
BBFFBBFRRL
BBBFFBBRLR
FBBFBFBLRL
FBFFFBBRRL
BFFFFBBLRL
FFBFBFBLLR
FFBBBBBRRR
FBBFBFFRLR
BBFBBBBRLL
BFBFBBBRRR
FBFFBFBRRL
FBFBFBFLRL
BFBBFBFLRL
FFFBBFBRLL
BBBFFBBLLL
FBBFBBBRRL
FFBBBBFLLR
FFBBFFFRRL
FFBFBBFRLR
BBFFFFBRRR
FBBBBFFLLR
FFBBFFFLLL
BFBBFFBLLL
FBFFFFBRRR
BFFFBFBRLL
FBFFFBFLLL
BFBFBFFLRL
FFBFFBBRLR
FFFBBFBRRL
FBFFBBFLLL
FBFFFBBLLL
FFBFFFFLLL
FBFFBBBRRR
BFBBBBBRLR
BFBFBFFLLR
BBBFBBBRRL
FBBFFFBLRL
FFBFBFBRRR
FFFBFFFRRL
FBBBFFFRRR
BFBBBFBLLL
FBBFFBFRLL
FFBFFBFLRR
FBFBFBFLRR
BFFBBFBLLL
FBFBBFFLRR
BFBBBBBLLL
FFBFFFBLLR
FBBBBFFLRR
FBBBBFBLLR
FFFBFBFRLL
FBFBBBBLLR
FFFBFFBLLL
BFFBBFFRLL
BBFBBFFRRR
FFFBFFBLRR
BBBFBFFRLR
BBFBBFFLLR
BBFBBFFRLL
FFBBBBBLRR
FFFBFFBLRL
FFBBBFBRRR
BBBFBFFRLL
FFFBBBBLRL
FBFBBBFRLL
FFBFFFBLLL
FBBBFBFLRR
BBFFBBFRRR
BFBFBFBLRL
BFBFBBFRRL
FBBBFFFLLR
FBBBBBBRRR
BBFBFBFRRL
BFFBBBBLLL
FBFFBFBRRR
FBFFFFBRLR`;
const arr = input.split('\n');

const cols = 7;
const rows = 127;

let regex = new RegExp(/([F|B|]){8}([R|L]){2}/g);

let getRange = (range, start, end) => {
    if(range === 'upper') {
        return {
            start: middleIndex = Math.floor((start + end) / 2)+1,
            end
        }
    } else {
        return {
            start,
            end: middleIndex = Math.floor((start + end) / 2),
        }
    }
}

let getRow = (str, start, end) => {
    let range = { start:0, end: rows};
    for(i=0; i < 7; i ++){
        let char = str.charAt(i);
        switch(char){
            case 'F':
                if(i === 6) {
                    return range.start;
                }
                range = getRange('lower', range.start, range.end);
                break;
            case 'B':
                if(i === 6) {
                    return range.end;
                }
                range = getRange('upper', range.start, range.end);
                    break;
        }
    }
}

let getCol = (str) => {
    let range = { start:0, end: cols};
    for(i=7; i < str.length; i ++){
        let char = str.charAt(i);
        switch(char){
            case 'L':
                if(i === str.length-1) {
                    return range.start;
                }
                range = getRange('lower', range.start, range.end);
                break;
            case 'R':
                if(i === str.length-1) {
                    return range.end;
                }
                range = getRange('upper', range.start, range.end);
                    break;
        }
    }
}

let getMax = (a, b) => {
    if(a < b) {
        return b;
    }
    return a;
}

let getSeatID = (row, col)  => {
    return (row * 8) + col;
}

/* TEST LOGS */
/* SAMPLE DATA TEST */
// console.log('FBFBBFFRLR');
// console.log(getRow('FBFBBFFRLR'));
// console.log(getCol('FBFBBFFRLR'));

let seats = [];
let generateSeats = (arr) => {
    console.log('________________________________');
    let seats = [];
    console.log("GENERATING SEAT NUMBERS...");
    for(index = 0; index < arr.length; index++) {
        let row = getRow(arr[index]);
        let col = getCol(arr[index]);
        seats.push(`${row}${col}`);
    }
    console.log("SORTING SEAT NUMBERS...");
    return seats.sort((a,b) => (parseInt(a) > parseInt(b) ) ? 1 : ((parseInt(b) > parseInt(a)) ? -1 : 0));
}

let getMaxSeatID = (arr) => { 
    console.log('________________________________');
    console.log("GETTING MAX SEATID...");
    let maxID = 0;
    for(index = 0; index < arr.length; index++) {
        let row = getRow(arr[index]);
        let col = getCol(arr[index]);
        let seatID = getSeatID(row, col);
        maxID = getMax(maxID, seatID);
    }
    return `MAX SEATID: ${maxID}`;
}

let ctr = 0;
let findMySeat = (seats) => {
    console.log('FINDING SEAT...');
    do {
        if(parseInt(seats[ctr+1]) - parseInt(seats[ctr]) === 2) {
            let mySeat = `${parseInt(seats[ctr]) + 1}`;
            console.log(`\nVACANT MIDDLE SEAT FOUND!`);
            console.log('________________________________');
            console.log(`LOWER SEAT: ${seats[ctr]}`);
            console.log(`HIGHER SEAT: ${seats[ctr+1]}`);
            console.log('________________________________');
            console.log(`MY SEAT:
    ROW: ${parseInt(mySeat.substring(0, mySeat.length-1))}
    COL: ${parseInt(mySeat.charAt(mySeat.length-1))}`);
            console.log('GENERATING SEAT ID...');
            return `MY SEAT ID: ${getSeatID(mySeat.substring(0, mySeat.length-1), parseInt(mySeat.charAt(mySeat.length-1)))}`;
        }
        ctr++;
    } while(ctr < seats.length);
}
console.log('________________________________');
console.log(getMaxSeatID(arr));
console.log(findMySeat(generateSeats(arr)));
console.log('________________________________');




